{"version":3,"sources":["src-es6/modules/colOps.js"],"names":[],"mappings":"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","file":"src-es6/modules/colOps.js","sourcesContent":["import {Dom} from '../dom';\nimport {Str} from '../string';\n\nexport class ColOps{\n\n    /**\n     * Column calculations\n     * @param {Object} tf TableFilter instance\n     */\n    constructor(tf) {\n        var f = tf.fObj;\n        this.colOperation = f.col_operation;\n\n        this.tf = tf;\n    }\n\n    /**\n     * Calculates columns' values\n     * Configuration options are stored in 'colOperation' property\n     * - 'id' contains ids of elements showing result (array)\n     * - 'col' contains the columns' indexes (array)\n     * - 'operation' contains operation type (array, values: 'sum', 'mean',\n     *   'min', 'max', 'median', 'q1', 'q3')\n     * - 'write_method' array defines which method to use for displaying the\n     *    result (innerHTML, setValue, createTextNode) - default: 'innerHTML'\n     * - 'tot_row_index' defines in which row results are displayed\n     *   (integers array)\n     *\n     * - changes made by Nuovella:\n     * (1) optimized the routine (now it will only process each column once),\n     * (2) added calculations for the median, lower and upper quartile.\n     */\n    calc() {\n        if(!this.tf.isFirstLoad && !this.tf.hasGrid){\n            return;\n        }\n\n        if(this.tf.onBeforeOperation){\n            this.tf.onBeforeOperation.call(null, this.tf);\n        }\n\n        var colOperation = this.colOperation,\n            labelId = colOperation.id,\n            colIndex = colOperation.col,\n            operation = colOperation.operation,\n            outputType = colOperation.write_method,\n            totRowIndex = colOperation.tot_row_index,\n            excludeRow = colOperation.exclude_row,\n            decimalPrecision = colOperation.decimal_precision !== undefined ?\n                colOperation.decimal_precision : 2;\n\n        //nuovella: determine unique list of columns to operate on\n        var ucolIndex = [],\n            ucolMax = 0;\n        ucolIndex[ucolMax] = colIndex[0];\n\n        for(var ii=1; ii<colIndex.length; ii++){\n            var saved = 0;\n            //see if colIndex[ii] is already in the list of unique indexes\n            for(var jj=0; jj<=ucolMax; jj++){\n                if(ucolIndex[jj] === colIndex[ii]){\n                    saved = 1;\n                }\n            }\n            //if not saved then, save the index;\n            if (saved === 0){\n                ucolMax++;\n                ucolIndex[ucolMax] = colIndex[ii];\n            }\n        }\n\n        if(Str.lower(typeof labelId)=='object' &&\n            Str.lower(typeof colIndex)=='object' &&\n            Str.lower(typeof operation)=='object'){\n            var row = this.tf.tbl.rows,\n                colvalues = [];\n\n            for(var ucol=0; ucol<=ucolMax; ucol++){\n                //this retrieves col values\n                //use ucolIndex because we only want to pass through this loop\n                //once for each column get the values in this unique column\n                colvalues.push(\n                    this.tf.GetColValues(ucolIndex[ucol], true, excludeRow));\n\n                //next: calculate all operations for this column\n                var result,\n                    nbvalues=0,\n                    temp,\n                    meanValue=0,\n                    sumValue=0,\n                    minValue=null,\n                    maxValue=null,\n                    q1Value=null,\n                    medValue=null,\n                    q3Value=null,\n                    meanFlag=0,\n                    sumFlag=0,\n                    minFlag=0,\n                    maxFlag=0,\n                    q1Flag=0,\n                    medFlag=0,\n                    q3Flag=0,\n                    theList=[],\n                    opsThisCol=[],\n                    decThisCol=[],\n                    labThisCol=[],\n                    oTypeThisCol=[],\n                    mThisCol=-1;\n\n                for(var k=0; k<colIndex.length; k++){\n                     if(colIndex[k] === ucolIndex[ucol]){\n                        mThisCol++;\n                        opsThisCol[mThisCol]=Str.lower(operation[k]);\n                        decThisCol[mThisCol]=decimalPrecision[k];\n                        labThisCol[mThisCol]=labelId[k];\n                        oTypeThisCol = outputType !== undefined &&\n                            Str.lower(typeof outputType)==='object' ?\n                            outputType[k] : null;\n\n                        switch(opsThisCol[mThisCol]){\n                            case 'mean':\n                                meanFlag=1;\n                            break;\n                            case 'sum':\n                                sumFlag=1;\n                            break;\n                            case 'min':\n                                minFlag=1;\n                            break;\n                            case 'max':\n                                maxFlag=1;\n                            break;\n                            case 'median':\n                                medFlag=1;\n                                break;\n                            case 'q1':\n                                q1Flag=1;\n                            break;\n                            case 'q3':\n                                q3Flag=1;\n                            break;\n                        }\n                    }\n                }\n\n                for(var j=0; j<colvalues[ucol].length; j++){\n                    //sort the list for calculation of median and quartiles\n                    if((q1Flag==1)|| (q3Flag==1) || (medFlag==1)){\n                        if (j<colvalues[ucol].length -1){\n                            for(k=j+1; k<colvalues[ucol].length; k++) {\n                                if(eval(colvalues[ucol][k]) <\n                                    eval(colvalues[ucol][j])){\n                                    temp = colvalues[ucol][j];\n                                    colvalues[ucol][j] = colvalues[ucol][k];\n                                    colvalues[ucol][k] = temp;\n                                }\n                            }\n                        }\n                    }\n                    var cvalue = parseFloat(colvalues[ucol][j]);\n                    theList[j] = parseFloat(cvalue);\n\n                    if(!isNaN(cvalue)){\n                        nbvalues++;\n                        if(sumFlag===1 || meanFlag===1){\n                            sumValue += parseFloat( cvalue );\n                        }\n                        if(minFlag===1){\n                            if(minValue===null){\n                                minValue = parseFloat( cvalue );\n                            } else{\n                                minValue = parseFloat( cvalue ) < minValue ?\n                                    parseFloat( cvalue ): minValue;\n                            }\n                        }\n                        if(maxFlag===1){\n                            if (maxValue===null){\n                                maxValue = parseFloat( cvalue );\n                            } else {\n                                maxValue = parseFloat( cvalue ) > maxValue ?\n                                    parseFloat( cvalue ): maxValue;\n                            }\n                        }\n                    }\n                }//for j\n                if(meanFlag===1){\n                    meanValue = sumValue/nbvalues;\n                }\n                if(medFlag===1){\n                    var aux = 0;\n                    if(nbvalues%2 === 1){\n                        aux = Math.floor(nbvalues/2);\n                        medValue = theList[aux];\n                    } else{\n                        medValue =\n                            (theList[nbvalues/2] + theList[((nbvalues/2)-1)])/2;\n                    }\n                }\n                var posa;\n                if(q1Flag===1){\n                    posa=0.0;\n                    posa = Math.floor(nbvalues/4);\n                    if(4*posa == nbvalues){\n                        q1Value = (theList[posa-1] + theList[posa])/2;\n                    } else {\n                        q1Value = theList[posa];\n                    }\n                }\n                if (q3Flag===1){\n                    posa=0.0;\n                    var posb=0.0;\n                    posa = Math.floor(nbvalues/4);\n                    if (4*posa === nbvalues){\n                        posb = 3*posa;\n                        q3Value = (theList[posb] + theList[posb-1])/2;\n                    } else {\n                        q3Value = theList[nbvalues-posa-1];\n                    }\n                }\n\n                for(var i=0; i<=mThisCol; i++){\n                    switch( opsThisCol[i] ){\n                        case 'mean':\n                            result=meanValue;\n                        break;\n                        case 'sum':\n                            result=sumValue;\n                        break;\n                        case 'min':\n                            result=minValue;\n                        break;\n                        case 'max':\n                            result=maxValue;\n                        break;\n                        case 'median':\n                            result=medValue;\n                            break;\n                        case 'q1':\n                            result=q1Value;\n                        break;\n                        case 'q3':\n                            result=q3Value;\n                        break;\n                    }\n\n                    var precision = !isNaN(decThisCol[i]) ? decThisCol[i] : 2;\n\n                    //if outputType is defined\n                    if(oTypeThisCol && result){\n                        result = result.toFixed( precision );\n\n                        if(Dom.id(labThisCol[i])){\n                            switch( Str.lower(oTypeThisCol) ){\n                                case 'innerhtml':\n                                    if (isNaN(result) || !isFinite(result) ||\n                                        nbvalues===0){\n                                        Dom.id(labThisCol[i]).innerHTML = '.';\n                                    } else{\n                                        Dom.id(labThisCol[i]).innerHTML = result;\n                                    }\n                                break;\n                                case 'setvalue':\n                                    Dom.id( labThisCol[i] ).value = result;\n                                break;\n                                case 'createtextnode':\n                                    var oldnode = Dom.id(labThisCol[i])\n                                        .firstChild;\n                                    var txtnode = Dom.text(result);\n                                    Dom.id(labThisCol[i])\n                                        .replaceChild(txtnode, oldnode);\n                                break;\n                            }//switch\n                        }\n                    } else {\n                        try{\n                            if(isNaN(result) || !isFinite(result) ||\n                                nbvalues===0){\n                                Dom.id(labThisCol[i]).innerHTML = '.';\n                            } else {\n                                Dom.id(labThisCol[i]).innerHTML =\n                                    result.toFixed(precision);\n                            }\n                        } catch(e) {}//catch\n                    }//else\n                }//for i\n\n                // row(s) with result are always visible\n                var totRow = totRowIndex && totRowIndex[ucol] ?\n                                row[totRowIndex[ucol]] : null;\n                if(totRow){\n                    totRow.style.display = '';\n                }\n            }//for ucol\n        }//if typeof\n\n        if(this.tf.onAfterOperation){\n            this.tf.onAfterOperation.call(null, this.tf);\n        }\n    }\n\n}"]}